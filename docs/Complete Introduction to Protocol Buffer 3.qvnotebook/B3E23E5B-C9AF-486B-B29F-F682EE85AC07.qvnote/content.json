{
  "title": "2 - Protocol Buffers Basics I",
  "cells": [
    {
      "type": "text",
      "data": "<h3>First Message&nbsp;</h3>"
    },
    {
      "type": "text",
      "data": "<b>First message - Introduction</b>"
    },
    {
      "type": "text",
      "data": "<ul><li>Here’s our first message:</li></ul>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/B6F368CF911DB914C7FA0A624841D4AA.png\" alt=\"Screen Shot 2019-02-05 at 11.17.42.png\" width=\"743\" height=\"281\"><br>"
    },
    {
      "type": "text",
      "data": "<h3>Scalar Types</h3>"
    },
    {
      "type": "text",
      "data": "<b>Scalar Types Number</b>"
    },
    {
      "type": "text",
      "data": "<ul><li>Numbers can take various forms based on what values you expect them to have: double, float, int32, int64, uint32, uint64, sint32, sint64, fixed32, fixed64, sfixed32, sfixed64</li><li><u>Integer</u>: For now, let’s use <font color=\"#0096ff\">int32</font> (There’s a discussion in the advanced section of advantages of each specific type)</li><li><u>Floating point numbers</u>:</li><ul><li><font color=\"#0096ff\">float</font> (32 bits)</li><li><font color=\"#0096ff\">double</font> (64 bits) - for more precision (if you really need it)</li></ul></ul>"
    },
    {
      "type": "text",
      "data": "<b>Scalar Types Boolean</b>"
    },
    {
      "type": "text",
      "data": "<ul><li>Boolean can hold the value <font color=\"#0096ff\">True</font> of <font color=\"#0096ff\">False</font>&nbsp;</li><li>It is represented as <font color=\"#0096ff\">bool</font> in protobuf&nbsp;</li></ul>"
    },
    {
      "type": "text",
      "data": "<b>Scalar Types String</b>"
    },
    {
      "type": "text",
      "data": "<ul><li>String represents an arbitrary length of text&nbsp;</li><li>It is represented as <font color=\"#0096ff\">string</font> in Protobuf&nbsp;</li><li>A string must always contain UTF-8 encoded or 7-bit ASCII text.&nbsp;</li></ul>"
    },
    {
      "type": "text",
      "data": "<b>Scalar Types Bytes</b>"
    },
    {
      "type": "text",
      "data": "<ul><li>Bytes represents any sequence of byte array.&nbsp;</li><li>It is represented as <font color=\"#0096ff\">bytes</font> in Protobuf&nbsp;</li><li>It will be up to you to interpret what these bytes mean&nbsp;</li><li>For example you could use these bytes to include a small image&nbsp;</li></ul>"
    },
    {
      "type": "text",
      "data": "<b>Scalar Types Summary&nbsp;</b>"
    },
    {
      "type": "text",
      "data": "<ul><li>Let’s create a message Person that has&nbsp;</li><ul><li>int 32 (Age)</li><li>string (first name)</li><li>string (last name)</li><li>bytes (small picture)&nbsp;</li><li>bool (profile verified)</li><li>float (height)</li></ul></ul>"
    },
    {
      "type": "text",
      "data": "/src/basics/scalar-types.proto"
    },
    {
      "type": "code",
      "language": "protobuf",
      "data": "syntax = \"proto3\";\n\nmessage Person {\n    int32 age = 1;\n    string first_name = 2;\n    string last_name = 3;\n    bytes small_picture = 4;\n    bool is_profile_verified = 5;\n    float height = 6;\n}"
    },
    {
      "type": "text",
      "data": "<h3>Tags</h3>"
    },
    {
      "type": "text",
      "data": "<ul><li>In Protocol Buffers, field names are not important! (but when programming the fields are important)</li><li>For protobuf the important element is the <font color=\"#0096ff\">tag</font>&nbsp;</li><li>Smallest tag: 1</li><li>Largest tag:&nbsp;</li></ul>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/7B58840FDAD4C838F0BE7598D5B202DD.png\" alt=\"Screen Shot 2019-02-05 at 11.49.37.png\" width=\"225\" height=\"41\">"
    },
    {
      "type": "text",
      "data": "<ul><li>You also cannot use the numbers 19000 through 19999</li><li>Tags numbered from 1 to 15 use <font color=\"#0096ff\">1 byte</font> in space, so use them for frequently populated fields&nbsp;</li><li>Tags numbered from 16 to 2047 use <font color=\"#0096ff\">2 bytes</font></li><li>&nbsp;There’s a concept of <font color=\"#0096ff\">reserved</font> tag that we’ll see in the advanced lectures&nbsp;</li></ul>"
    },
    {
      "type": "text",
      "data": "<h3>Repeated Fields</h3>"
    },
    {
      "type": "text",
      "data": "<ul><li>To make a “list” or an “array”, you can use the concept of repeated fields&nbsp;</li><li>The list can take any number (0 or more) of elements you want&nbsp;</li><li>The opposite of <font color=\"#0096ff\">repeated</font> is “singular” (we don’t write it)</li><li>Let’s add a list of phone numbers to our Person example!</li></ul>"
    },
    {
      "type": "text",
      "data": "/src/basics/repeated-fields.proto"
    },
    {
      "type": "code",
      "language": "protobuf",
      "data": "syntax = \"proto3\";\n\nmessage Person {\n    int32 age = 1;\n    string first_name = 2;\n    string last_name = 3;\n    bytes small_picture = 4;\n    bool is_profile_verified = 5;\n    float height = 6;\n\n    repeated string phone_numbers = 7;\n}"
    },
    {
      "type": "text",
      "data": "<h3>Comments</h3>"
    },
    {
      "type": "text",
      "data": "<ul><li>It is possible to embed comments in your .proto file&nbsp;</li><li>It is acutally recommended to use comments as a form of documentation for your schemas.&nbsp;</li><li>Comments can be of these two forms:</li><ul><li>// this is a comment&nbsp;</li><li>/* this is a&nbsp;</li><li>* multiline comment */</li></ul><li>Let’s add comments to our Person!</li></ul>"
    },
    {
      "type": "text",
      "data": "<h3>Default Values for Fields</h3>"
    },
    {
      "type": "text",
      "data": "<ul><li>All fields, if not specified or unknown, will take a default value&nbsp;</li></ul>"
    },
    {
      "type": "text",
      "data": "<ul><li><font color=\"#0096ff\">bool</font>:false</li><li>number (<font color=\"#0096ff\">int32</font>, etc…): 0</li><li><font color=\"#0096ff\">string</font>: empty string</li><li><font color=\"#0096ff\">bytes</font>: empty bytes</li><li><font color=\"#0096ff\">enum</font>:first value</li><li><font color=\"#0096ff\">repeated</font>:empty list</li></ul>"
    },
    {
      "type": "text",
      "data": "<h3>Enumerations (Enums)</h3>"
    },
    {
      "type": "text",
      "data": "<ul><li>If you know all the values a field can take in advance, you can leverage the <font color=\"#0096ff\">Enum</font> type&nbsp;</li><li><b><u>The first value of an Enum is the default value&nbsp;</u></b></li><li><font color=\"#0096ff\">Enum</font> must start by the tag 0 (which is the default value)</li><li>Let’s add an Enum to our Person for the field Eye Color&nbsp;</li></ul>"
    },
    {
      "type": "text",
      "data": "/src/basics/enums.proto"
    },
    {
      "type": "code",
      "language": "protobuf",
      "data": "// The syntax for this file is proto3\nsyntax = \"proto3\";\n\n/* Person is used to identify users \n* across our system */\nmessage Person {\n    // the age as of the person's creation\n    int32 age = 1;\n    // the first name as documented in the signup form \n    string first_name = 2;\n    string last_name = 3; // last name as documented in the signup form\n    // small_picture represents a small .jpg file \n    bytes small_picture = 4;\n    bool is_profile_verified = 5;\n    // height of the person in cms\n    float height = 6;\n\n    // a list of phone numbers that is optional to provide at signup\n    repeated string phone_numbers = 7;\n\n    // we currently consider only 3 eye colors \n    enum EyeColor {\n        UNKNOWN_EYE_COLOR = 0;\n        EYE_GREEN = 1;\n        EYE_BROWN = 2;\n        EYE_BLUE = 3;\n    }\n\n    // it's an enum as defined above\n    EyeColor eye_color = 8;\n}"
    },
    {
      "type": "text",
      "data": "<h3>Solutions to Practice Exercise I</h3>"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}